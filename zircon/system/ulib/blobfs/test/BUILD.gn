# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

##########################################
# Though under //zircon, this build file #
# is meant to be used in the Fuchsia GN  #
# build.                                 #
# See fxb/36139.                         #
##########################################

assert(!defined(zx) || zx != "/",
       "This file can only be used in the Fuchsia GN build.")

import("//build/test.gni")
import("//build/unification/images/migrated_manifest.gni")

import("//build/fuzzing/fuzzer.gni")

group("test") {
  testonly = true
  deps = [
    ":blobfs-integration",
    ":blobfs-large-integration",
    ":blobfs-unit",
    ":zstd-fuzzer",
    ":zstd-seekable-fuzzer",
    ":zstd-seekable-symmetric-fuzzer",
  ]
}

test("blobfs-unit") {
  # Dependent manifests unfortunately cannot be marked as `testonly`.
  # TODO(44278): Remove when converting this file to proper GN build idioms.
  if (is_fuchsia) {
    testonly = false
  }
  if (is_fuchsia) {
    configs += [ "//build/unification/config:zircon-migrated" ]
  }
  if (is_fuchsia) {
    fdio_config = [ "//build/config/fuchsia:fdio_config" ]
    if (configs + fdio_config - fdio_config != configs) {
      configs -= fdio_config
    }
  }
  test_group = "fs"
  sources = [
    "unit/allocated-extent-iterator-test.cc",
    "unit/allocator-test.cc",
    "unit/blob-cache-test.cc",
    "unit/blob-loader-test.cc",
    "unit/blob-test.cc",
    "unit/blob-verifier-test.cc",
    "unit/blobfs-checker-test.cc",
    "unit/blobfs-pager-test.cc",
    "unit/blobfs-test.cc",
    "unit/compressor-test.cc",
    "unit/create-tests.cc",
    "unit/extent-reserver-test.cc",
    "unit/format-test.cc",
    "unit/fsck-test.cc",
    "unit/get-allocated-regions-test.cc",
    "unit/node-populator-test.cc",
    "unit/node-reserver-test.cc",
    "unit/utils.cc",
    "unit/vector-extent-iterator-test.cc",
  ]
  deps = [
    "//zircon/public/lib/async-loop",
    "//zircon/public/lib/async-loop-cpp",
    "//zircon/public/lib/async-loop-default",
    "//zircon/public/lib/blobfs",
    "//zircon/public/lib/buffer",
    "//zircon/public/lib/cksum",
    "//zircon/public/lib/fake-device",
    "//zircon/public/lib/fidl-utils",
    "//zircon/public/lib/fs-management",
    "//zircon/public/lib/id_allocator",
    "//zircon/public/lib/lz4",
    "//zircon/public/lib/operation",
    "//zircon/public/lib/safemath",
    "//zircon/public/lib/sync",
    "//zircon/public/lib/zstd",
    "//zircon/public/lib/zxtest",
    "//zircon/system/fidl/fuchsia-blobfs:c",
    "//zircon/system/ulib/fs-test-utils",
  ]

  include_dirs = [ ".." ]
}

test("blobfs-host") {
  sources = [ "host/host-test.cc" ]
  deps = [
    "//zircon/public/lib/blobfs",
    "//zircon/public/lib/zxtest",
  ]
}

source_set("integration-fixtures") {
  # TODO(44278): revert to true.
  testonly = false
  sources = [ "integration/blobfs_fixtures.cc" ]
  deps = [
    "//zircon/public/lib/blobfs",
    "//zircon/public/lib/fdio",
    "//zircon/public/lib/fs_test_support",
    "//zircon/public/lib/fvm",
    "//zircon/public/lib/zxtest",
    "//zircon/system/ulib/fs-test-utils",
  ]
}

test("blobfs-integration") {
  # Dependent manifests unfortunately cannot be marked as `testonly`.
  # TODO(44278): Remove when converting this file to proper GN build idioms.
  if (is_fuchsia) {
    testonly = false
  }
  if (is_fuchsia) {
    configs += [ "//build/unification/config:zircon-migrated" ]
  }
  if (is_fuchsia) {
    fdio_config = [ "//build/config/fuchsia:fdio_config" ]
    if (configs + fdio_config - fdio_config != configs) {
      configs -= fdio_config
    }
  }
  test_group = "fs"
  sources = [
    "integration/blobfs_integration_test.cc",
    "integration/integration_main.cc",
    "integration/mount_test.cc",
    "integration/query_service_test.cc",
    "integration/superblock-test.cc",
  ]
  deps = [
    ":integration-fixtures",
    "//zircon/public/lib/async-loop",
    "//zircon/public/lib/async-loop-default",
    "//zircon/public/lib/blobfs",
    "//zircon/public/lib/fdio",
    "//zircon/public/lib/fdio-caller",
    "//zircon/public/lib/fs_test_support",
    "//zircon/public/lib/fvm",
    "//zircon/public/lib/fzl",
    "//zircon/public/lib/id_allocator",
    "//zircon/public/lib/memfs",
    "//zircon/public/lib/zx",
    "//zircon/public/lib/zxtest",
    "//zircon/system/fidl/fuchsia-blobfs:c",
    "//zircon/system/fidl/fuchsia-fs:llcpp",
    "//zircon/system/ulib/fs-test-utils",
  ]

  include_dirs = [ ".." ]
}

test("blobfs-large-integration") {
  # Dependent manifests unfortunately cannot be marked as `testonly`.
  # TODO(44278): Remove when converting this file to proper GN build idioms.
  if (is_fuchsia) {
    testonly = false
  }
  if (is_fuchsia) {
    configs += [ "//build/unification/config:zircon-migrated" ]
  }
  if (is_fuchsia) {
    fdio_config = [ "//build/config/fuchsia:fdio_config" ]
    if (configs + fdio_config - fdio_config != configs) {
      configs -= fdio_config
    }
  }
  test_group = "fs"
  sources = [
    "integration/large_integration_main.cc",
    "integration/large_integration_test.cc",
    "integration/load_generator.cc",
  ]
  deps = [
    ":integration-fixtures",
    "//zircon/public/lib/async-loop",
    "//zircon/public/lib/async-loop-default",
    "//zircon/public/lib/blobfs",
    "//zircon/public/lib/fdio",
    "//zircon/public/lib/fdio-caller",
    "//zircon/public/lib/fs_test_support",
    "//zircon/public/lib/fvm",
    "//zircon/public/lib/memfs",
    "//zircon/public/lib/zxtest",
    "//zircon/system/fidl/fuchsia-sysinfo:llcpp",
    "//zircon/system/ulib/fs-test-utils",
  ]
}

fuzzer("zstd-fuzzer") {
  sources = [ "zstd-fuzzer.cc" ]
  deps = [
    "//third_party/zstd",
    "//zircon/public/lib/blobfs",
  ]
  include_dirs = [ ".." ]
}

fuzzer("lz4-fuzzer") {
  sources = [ "lz4-fuzzer.cc" ]
  deps = [
    "//zircon/public/lib/blobfs",
    "//zircon/public/lib/lz4",
  ]
  include_dirs = [ ".." ]
}

fuzzer("zstd-seekable-symmetric-fuzzer") {
  sources = [ "zstd-seekable-symmetric-fuzzer.cc" ]
  deps = [
    "//third_party/zstd:zstdseek",
    "//zircon/public/lib/blobfs",
  ]
  include_dirs = [ ".." ]
}

fuzzer("zstd-seekable-fuzzer") {
  sources = [ "zstd-seekable-fuzzer.cc" ]
  deps = [
    "//third_party/zstd:zstdseek",
    "//zircon/public/lib/blobfs",
  ]
  include_dirs = [ ".." ]
}

migrated_manifest("blobfs-unit-manifest") {
  deps = [ ":blobfs-unit" ]
}

migrated_manifest("blobfs-integration-manifest") {
  deps = [ ":blobfs-integration" ]
}

migrated_manifest("blobfs-large-integration-manifest") {
  deps = [ ":blobfs-large-integration" ]
}
