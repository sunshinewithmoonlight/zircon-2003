# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("$zx/public/gn/test/zbi_test.gni")

# Each subdirectory just provides an eponymous source_set().
core_tests = [
  "c11-condvar",
  "c11-mutex",
  "c11-thread",
  "channel",
  "channel-write-etc",
  "clock",
  "debug",
  "elf-tls",
  "event-pair",
  "fifo",
  "fpu",
  "futex",
  "handle-close",
  "handle-dup",
  "handle-info",
  "handle-transfer",
  "handle-wait",
  "job",
  "memory-mapping",
  "object-child",
  "object-info",
  "object-wait",
  "pager",
  "port",
  "process",
  "pthread",
  "pthread-barrier",
  "pthread-tls",
  "socket",
  "stack",
  "stream",
  "sync-completion",
  "sync-condition",
  "sync-mutex",
  "threads",
  "time",
  "version",
  "vmar",
  "vmo",
]

# These tests need to run in the unified core-tests binary because
# they either call get_root_resource() or they need to run in a job
# tree without any exception handler.
unified_only = [
  "bad-syscall",
  "bti",
  "default-exception-handler",  # needs job tree w/o exception handler.
  "debug:unified-only",
  "interrupt",
  "profile",
  "resource",
  "system-event",
]

group("core") {
  testonly = true

  # The zbi_test() doesn't go into any other zbi() image.  This just brings
  # it into the dependency graph for building and test-running metadata.
  deps = [ ":core-tests" ]  # Together.

  foreach(test, core_tests) {
    deps += [ ":$test" ]  # And alone.
  }

  # If we are building for x64, make sure to run a version of the core tests
  # which forces use of the HPET in addition to using the default TSC
  if (current_cpu == "x64") {
    deps += [ ":core-tests-hpet" ]
  }
}

# Build each test as a standalone binary meant to be run by runtests.
foreach(test_name, core_tests) {
  zx_test(test_name) {
    test_group = "core"
    deps = [ test_name ]
  }
}

# Now build all of those (and more) together into the core-tests
# binary.  This can and must be run directly from userboot because
# some of the tests require the root resource handle or no system
# services whatsoever.
zx_test("standalone") {
  test_group = "core"
  deps = core_tests + unified_only
  sources = [ "libc-and-io-stubs.c" ]
  deps += [
    "$zx/system/ulib/zircon",
    "$zx/system/ulib/zxtest",
  ]
}

# Make that into a bootable ZBI with just the kernel.
zbi_test("core-tests") {
  assert(current_cpu != "")

  args = [
    "userboot=test/core/standalone-test",
    "kernel.enable-debugging-syscalls=true",
  ]

  deps = [
    ":standalone",
    "$zx/kernel",
  ]
  assert_no_deps = [
    "$zx/system/core/*",
    "$zx/system/dev/*",
  ]

  device_types = [
    "Astro",
    "QEMU",
    "Intel NUC Kit NUC7i5DNHE",
    "Sherlock",
  ]
}

# If we are building for x64, make sure to run the core tests on a system which
# has been  configured to force selection of HPET as the timing source instead
# of choosing TSC if possible.
if (current_cpu == "x64") {
  # Make that into a bootable ZBI with just the kernel.
  zbi_test("core-tests-hpet") {
    args = [
      "userboot=test/core/standalone-test",
      "kernel.wallclock=hpet",
      "kernel.enable-debugging-syscalls=true",
    ]
    deps = [
      ":standalone",
      "$zx/kernel",
    ]
    assert_no_deps = [
      "$zx/system/core/*",
      "$zx/system/dev/*",
    ]
    device_types = [ "Intel NUC Kit NUC7i5DNHE" ]
  }
}
