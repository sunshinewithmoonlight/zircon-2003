// WARNING: This file is machine generated by fidlc.

#include <lib/fidl/internal.h>

// Forward declarations for old <-> V1 mappings

static const fidl_type_t Vector4294967295nonnullable5uint8Table;
static const fidl_type_t Vector1024nonnullable5uint8Table;
static const fidl_type_t Vector1024nullable5uint8Table;
extern const fidl_type_t example_ByteAndBytesTable;
static const fidl_type_t v1_Vector4294967295nonnullable5uint8Table;
static const fidl_type_t v1_Vector1024nonnullable5uint8Table;
static const fidl_type_t v1_Vector1024nullable5uint8Table;
extern const fidl_type_t v1_example_ByteAndBytesTable;

// Coding tables for old wire format.

extern const fidl_type_t example_ByteAndBytesTable;


static const fidl_type_t Vector4294967295nonnullable5uint8Table = {.type_tag=kFidlTypeVector, {.coded_vector={.element=NULL, .max_count=4294967295u, .element_size=1u, .nullable=kFidlNullability_Nonnullable, .alt_type=&v1_Vector4294967295nonnullable5uint8Table}}};

static const fidl_type_t Vector1024nonnullable5uint8Table = {.type_tag=kFidlTypeVector, {.coded_vector={.element=NULL, .max_count=1024u, .element_size=1u, .nullable=kFidlNullability_Nonnullable, .alt_type=&v1_Vector1024nonnullable5uint8Table}}};

static const fidl_type_t Vector1024nullable5uint8Table = {.type_tag=kFidlTypeVector, {.coded_vector={.element=NULL, .max_count=1024u, .element_size=1u, .nullable=kFidlNullability_Nullable, .alt_type=&v1_Vector1024nullable5uint8Table}}};


static const struct FidlStructField Fields20example_ByteAndBytes[] = {
    /*FidlStructField*/{.type=NULL, .padding_offset=1u, .padding=7u},
    /*FidlStructField*/{.type=&Vector4294967295nonnullable5uint8Table, .offset=8u, .padding=0u},
    /*FidlStructField*/{.type=&Vector1024nonnullable5uint8Table, .offset=24u, .padding=0u},
    /*FidlStructField*/{.type=&Vector1024nullable5uint8Table, .offset=40u, .padding=0u}
};
const fidl_type_t example_ByteAndBytesTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields20example_ByteAndBytes, .field_count=4u, .size=56u, .max_out_of_line=4294967295u, .contains_union=false, .name="example/ByteAndBytes", .alt_type=&v1_example_ByteAndBytesTable}}};

// Coding tables for v1 wire format.

extern const fidl_type_t v1_example_ByteAndBytesTable;


static const fidl_type_t v1_Vector4294967295nonnullable5uint8Table = {.type_tag=kFidlTypeVector, {.coded_vector={.element=NULL, .max_count=4294967295u, .element_size=1u, .nullable=kFidlNullability_Nonnullable, .alt_type=&Vector4294967295nonnullable5uint8Table}}};

static const fidl_type_t v1_Vector1024nonnullable5uint8Table = {.type_tag=kFidlTypeVector, {.coded_vector={.element=NULL, .max_count=1024u, .element_size=1u, .nullable=kFidlNullability_Nonnullable, .alt_type=&Vector1024nonnullable5uint8Table}}};

static const fidl_type_t v1_Vector1024nullable5uint8Table = {.type_tag=kFidlTypeVector, {.coded_vector={.element=NULL, .max_count=1024u, .element_size=1u, .nullable=kFidlNullability_Nullable, .alt_type=&Vector1024nullable5uint8Table}}};


static const struct FidlStructField Fields23v1_example_ByteAndBytes[] = {
    /*FidlStructField*/{.type=NULL, .padding_offset=1u, .padding=7u},
    /*FidlStructField*/{.type=&v1_Vector4294967295nonnullable5uint8Table, .offset=8u, .padding=0u},
    /*FidlStructField*/{.type=&v1_Vector1024nonnullable5uint8Table, .offset=24u, .padding=0u},
    /*FidlStructField*/{.type=&v1_Vector1024nullable5uint8Table, .offset=40u, .padding=0u}
};
const fidl_type_t v1_example_ByteAndBytesTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields23v1_example_ByteAndBytes, .field_count=4u, .size=56u, .max_out_of_line=4294967295u, .contains_union=false, .name="example/ByteAndBytes", .alt_type=&example_ByteAndBytesTable}}};

