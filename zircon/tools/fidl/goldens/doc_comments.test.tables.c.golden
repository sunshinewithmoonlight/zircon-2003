// WARNING: This file is machine generated by fidlc.

#include <lib/fidl/internal.h>

// Forward declarations for old <-> V1 mappings

extern const fidl_type_t test_name_InterfaceMethodRequestTable;
extern const fidl_type_t test_name_InterfaceOnEventEventTable;
extern const fidl_type_t test_name_UnionTable;
extern const fidl_type_t test_name_StructTable;
extern const fidl_type_t v1_test_name_InterfaceMethodRequestTable;
extern const fidl_type_t v1_test_name_InterfaceOnEventEventTable;
extern const fidl_type_t v1_test_name_UnionTable;
extern const fidl_type_t v1_test_name_StructTable;

// Coding tables for old wire format.

extern const fidl_type_t test_name_UnionTable;
extern const fidl_type_t test_name_TableTable;
extern const fidl_type_t test_name_StructTable;
extern const fidl_type_t test_name_MyEnumTable;
extern const fidl_type_t test_name_MyBitsTable;


extern const fidl_type_t test_name_InterfaceMethodRequestTable;
static const struct FidlStructField Fields32test_name_InterfaceMethodRequest[] = {};
const fidl_type_t test_name_InterfaceMethodRequestTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields32test_name_InterfaceMethodRequest, .field_count=0u, .size=16u, .max_out_of_line=0u, .contains_union=false, .name="test.name/InterfaceMethodRequest", .alt_type=&v1_test_name_InterfaceMethodRequestTable}}};

extern const fidl_type_t test_name_InterfaceOnEventEventTable;
static const struct FidlStructField Fields31test_name_InterfaceOnEventEvent[] = {};
const fidl_type_t test_name_InterfaceOnEventEventTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields31test_name_InterfaceOnEventEvent, .field_count=0u, .size=16u, .max_out_of_line=0u, .contains_union=false, .name="test.name/InterfaceOnEventEvent", .alt_type=&v1_test_name_InterfaceOnEventEventTable}}};


static const struct FidlUnionField Fields15test_name_Union[] = {
    /*FidlUnionField*/{.type=NULL, .padding=0u, .xunion_ordinal=1u}
};
const fidl_type_t test_name_UnionTable = {.type_tag=kFidlTypeUnion, {.coded_union={.fields=Fields15test_name_Union, .field_count=1u, .data_offset=4u, .size=8u, .name="test.name/Union", .alt_type=&v1_test_name_UnionTable}}};

static const struct FidlTableField Fields15test_name_Table[] = {
    /*FidlTableField*/{.type=&fidl_internal_kInt32Table, .ordinal=1u}
};
const fidl_type_t test_name_TableTable = {.type_tag=kFidlTypeTable, {.coded_table={.fields=Fields15test_name_Table, .field_count=1u, .name="test.name/Table"}}};

static const struct FidlStructField Fields16test_name_Struct[] = {
    /*FidlStructField*/{.type=NULL, .padding_offset=4u, .padding=0u}
};
const fidl_type_t test_name_StructTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields16test_name_Struct, .field_count=1u, .size=4u, .max_out_of_line=0u, .contains_union=false, .name="test.name/Struct", .alt_type=&v1_test_name_StructTable}}};

static bool EnumValidatorFor_test_name_MyEnum(uint64_t v) { return (v == 1ul) || (v == 2ul) || false; }
const fidl_type_t test_name_MyEnumTable = {.type_tag=kFidlTypeEnum, {.coded_enum={.underlying_type=kFidlCodedPrimitive_Uint32, .validate=&EnumValidatorFor_test_name_MyEnum, .name="test.name/MyEnum"}}};

const fidl_type_t test_name_MyBitsTable = {.type_tag=kFidlTypeBits, {.coded_bits={.underlying_type=kFidlCodedPrimitive_Uint32, .mask=3ul, .name="test.name/MyBits"}}};

// Coding tables for v1 wire format.

extern const fidl_type_t v1_test_name_UnionTable;
extern const fidl_type_t v1_test_name_TableTable;
extern const fidl_type_t v1_test_name_StructTable;
extern const fidl_type_t v1_test_name_MyEnumTable;
extern const fidl_type_t v1_test_name_MyBitsTable;


extern const fidl_type_t v1_test_name_InterfaceMethodRequestTable;
static const struct FidlStructField Fields35v1_test_name_InterfaceMethodRequest[] = {};
const fidl_type_t v1_test_name_InterfaceMethodRequestTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields35v1_test_name_InterfaceMethodRequest, .field_count=0u, .size=16u, .max_out_of_line=0u, .contains_union=false, .name="test.name/InterfaceMethodRequest", .alt_type=&test_name_InterfaceMethodRequestTable}}};

extern const fidl_type_t v1_test_name_InterfaceOnEventEventTable;
static const struct FidlStructField Fields34v1_test_name_InterfaceOnEventEvent[] = {};
const fidl_type_t v1_test_name_InterfaceOnEventEventTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields34v1_test_name_InterfaceOnEventEvent, .field_count=0u, .size=16u, .max_out_of_line=0u, .contains_union=false, .name="test.name/InterfaceOnEventEvent", .alt_type=&test_name_InterfaceOnEventEventTable}}};


static const struct FidlXUnionField Fields18v1_test_name_Union[] = {
    /*FidlXUnionField*/{.type=&fidl_internal_kInt32Table, .ordinal=1u}
};
const fidl_type_t v1_test_name_UnionTable = {.type_tag=kFidlTypeXUnion, {.coded_xunion={.field_count=1u, .fields=Fields18v1_test_name_Union, .nullable=kFidlNullability_Nonnullable, .name="test.name/Union", .strictness=kFidlStrictness_Strict, .alt_type=&test_name_UnionTable}}};
static const struct FidlTableField Fields18v1_test_name_Table[] = {
    /*FidlTableField*/{.type=&fidl_internal_kInt32Table, .ordinal=1u}
};
const fidl_type_t v1_test_name_TableTable = {.type_tag=kFidlTypeTable, {.coded_table={.fields=Fields18v1_test_name_Table, .field_count=1u, .name="test.name/Table"}}};

static const struct FidlStructField Fields19v1_test_name_Struct[] = {
    /*FidlStructField*/{.type=NULL, .padding_offset=4u, .padding=0u}
};
const fidl_type_t v1_test_name_StructTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields19v1_test_name_Struct, .field_count=1u, .size=4u, .max_out_of_line=0u, .contains_union=false, .name="test.name/Struct", .alt_type=&test_name_StructTable}}};

static bool EnumValidatorFor_v1_test_name_MyEnum(uint64_t v) { return (v == 1ul) || (v == 2ul) || false; }
const fidl_type_t v1_test_name_MyEnumTable = {.type_tag=kFidlTypeEnum, {.coded_enum={.underlying_type=kFidlCodedPrimitive_Uint32, .validate=&EnumValidatorFor_v1_test_name_MyEnum, .name="test.name/MyEnum"}}};

const fidl_type_t v1_test_name_MyBitsTable = {.type_tag=kFidlTypeBits, {.coded_bits={.underlying_type=kFidlCodedPrimitive_Uint32, .mask=3ul, .name="test.name/MyBits"}}};

