library test.name;

protocol WithAndWithoutRequestResponse {
    NoRequestNoResponse();
    NoRequestEmptyResponse() -> ();
    NoRequestWithResponse() -> (string ret);
    WithRequestNoResponse(string arg);
    WithRequestEmptyResponse(string arg) -> ();
    WithRequestWithResponse(string arg) -> (string ret);
    -> OnEmptyResponse();
    -> OnWithResponse(string ret);
};

enum ErrorEnun {
    ERR_FOO = 1;
    ERR_BAR = 2;
};

protocol WithErrorSyntax {
    ResponseAsStruct() -> (int64 a, int64 b, int64 c) error uint32;
    ErrorAsPrimitive() -> () error uint32;
    ErrorAsEnum() -> () error ErrorEnun;
};

[Transport = "Channel"]
protocol ChannelProtocol {
    MethodA(int64 a, int64 b);
    -> EventA(int64 a, int64 b);
    MethodB(int64 a, int64 b) -> (int64 result);
    MutateSocket(handle<socket> a) -> (handle<socket> b);
};
